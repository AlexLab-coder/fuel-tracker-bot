import os
import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler
from flask import Flask
from threading import Thread
import time
import psycopg2

app = Flask('')

@app.route('/')
def home():
    return "üöó Fuel Bot is Alive!"

def run_flask():
    try:
        print("üîÑ Starting Flask server...")
        app.run(host='0.0.0.0', port=8080, debug=False)
    except Exception as e:
        print(f"‚ùå Flask error: {e}")

def keep_alive():
    print("üîß Starting keep_alive...")
    t = Thread(target=run_flask)
    t.daemon = True
    t.start()
    time.sleep(2)

keep_alive()
print("‚úÖ Flask server should be running")

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Database class for PostgreSQL
class FuelDatabase:
    def __init__(self):
        self.database_url = os.getenv('DATABASE_URL')
        self.init_db()
    
    def get_connection(self):
        return psycopg2.connect(self.database_url)
    
    def init_db(self):
        try:
            conn = self.get_connection()
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS refills
                         (id SERIAL PRIMARY KEY,
                          user_id BIGINT, 
                          timestamp TEXT,
                          amount REAL, 
                          cost REAL, 
                          odometer INTEGER)''')
            conn.commit()
            conn.close()
        except Exception as e:
            logging.error(f"Database init error: {e}")
    
    def add_refill(self, user_id, amount, cost, odometer):
        try:
            conn = self.get_connection()
            c = conn.cursor()
            c.execute("INSERT INTO refills (user_id, timestamp, amount, cost, odometer) VALUES (%s, %s, %s, %s, %s)",
                     (user_id, datetime.now().isoformat(), amount, cost, odometer))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logging.error(f"Add refill error: {e}")
            return False
    
    def get_current_consumption(self, user_id):
        try:
            conn = self.get_connection()
            c = conn.cursor()
            c.execute("SELECT * FROM refills WHERE user_id = %s ORDER BY odometer DESC LIMIT 2", (user_id,))
            refills = c.fetchall()
            conn.close()
            
            if len(refills) < 2:
                return None
            
            latest = refills[0]
            previous = refills[1]
            
            distance = latest[5] - previous[5]
            fuel_used = previous[3]
            
            if distance > 0:
                consumption = (fuel_used / distance) * 100
                return {
                    'consumption': f"{consumption:.1f}",
                    'distance': distance,
                    'fuel_used': fuel_used
                }
        except Exception as e:
            logging.error(f"Get consumption error: {e}")
        return None
    
    def get_monthly_statistics(self, user_id):
        try:
            conn = self.get_connection()
            c = conn.cursor()
            c.execute('''SELECT 
                        TO_CHAR(TO_TIMESTAMP(timestamp, 'YYYY-MM-DD"T"HH24:MI:SS.MS'), 'Month YYYY') as month,
                        SUM(amount) as total_liters,
                        SUM(cost) as total_cost,
                        AVG(cost/amount) as avg_price
                        FROM refills 
                        WHERE user_id = %s 
                        GROUP BY TO_CHAR(TO_TIMESTAMP(timestamp, 'YYYY-MM-DD"T"HH24:MI:SS.MS'), 'Month YYYY')
                        ORDER BY MIN(TO_TIMESTAMP(timestamp, 'YYYY-MM-DD"T"HH24:MI:SS.MS')) DESC''', (user_id,))
            
            results = []
            for row in c.fetchall():
                results.append({
                    'month': row[0].strip(),
                    'liters': f"{row[1]:.1f}",
                    'cost': f"{row[2]:.0f}",
                    'avg_price_per_liter': f"{row[3]:.1f}" if row[3] else "0.0"
                })
            conn.close()
            return results
        except Exception as e:
            logging.error(f"Monthly stats error: {e}")
            return []
    
    def get_user_refills(self, user_id, limit=10):
        try:
            conn = self.get_connection()
            c = conn.cursor()
            c.execute("SELECT * FROM refills WHERE user_id = %s ORDER BY timestamp DESC LIMIT %s", (user_id, limit))
            refills = []
            for row in c.fetchall():
                refills.append({
                    'timestamp': row[2],
                    'amount': row[3],
                    'cost': row[4],
                    'odometer': row[5]
                })
            conn.close()
            return refills
        except Exception as e:
            logging.error(f"Get refills error: {e}")
            return []
    
    def delete_user_data(self, user_id):
        try:
            conn = self.get_connection()
            c = conn.cursor()
            c.execute("DELETE FROM refills WHERE user_id = %s", (user_id,))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logging.error(f"Delete error: {e}")
            return False

# Initialize database
db = FuelDatabase()

# Conversation states
WAITING_REFILL_DATA, CONFIRM_RESET = range(2)

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    keyboard = get_main_keyboard()
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/refill - –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–∞–≤–∫—É\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–∞\n"
        "/reset - –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        "/help - –ü–æ–º–æ—â—å",
        reply_markup=keyboard
    )

def help_command(update: Update, context: CallbackContext):
    keyboard = get_main_keyboard()
    update.message.reply_text(
        "‚ÑπÔ∏è –ü–û–ú–û–©–¨:\n\n"
        "‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è:\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ª–∏—Ç—Ä—ã —Ü–µ–Ω–∞ –ø—Ä–æ–±–µ–≥\n"
        "–ü—Ä–∏–º–µ—Ä: 45 2500 155000\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –∏ –ø–æ–º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n"
        "–£–¥–∞–ª—è–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–∞–≤–æ–∫\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
        reply_markup=keyboard
    )

def refill_start(update: Update, context: CallbackContext):
    keyboard = get_main_keyboard()
    update.message.reply_text(
        "‚õΩ –ó–ê–ü–†–ê–í–ö–ê\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ª–∏—Ç—Ä—ã —Ü–µ–Ω–∞ –ø—Ä–æ–±–µ–≥\n\n"
        "–ü—Ä–∏–º–µ—Ä: 45 2500 155000\n\n"
        "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        reply_markup=keyboard
    )
    return WAITING_REFILL_DATA

def refill_data(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    keyboard = get_main_keyboard()
    
    try:
        parts = update.message.text.strip().split()
        
        if len(parts) != 3:
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ª–∏—Ç—Ä—ã —Ü–µ–Ω–∞ –ø—Ä–æ–±–µ–≥\n\n"
                "–ü—Ä–∏–º–µ—Ä: 45 2500 155000",
                reply_markup=keyboard
            )
            return WAITING_REFILL_DATA
        
        amount = float(parts[0])
        cost = float(parts[1])
        odometer = int(parts[2])
        
        if db.add_refill(user_id, amount, cost, odometer):
            price_per_liter = cost / amount
            update.message.reply_text(
                "‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
                f"üìä –°–≤–æ–¥–∫–∞:\n"
                f"‚Ä¢ –¢–æ–ø–ª–∏–≤–æ: {amount} –ª\n"
                f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} —Ä—É–±\n"
                f"‚Ä¢ –û–¥–æ–º–µ—Ç—Ä: {odometer} –∫–º\n"
                f"‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä: {price_per_liter:.2f} —Ä—É–±/–ª\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–∞!",
                reply_markup=keyboard
            )
        else:
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=keyboard
            )
        
        return ConversationHandler.END
        
    except ValueError:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "‚Ä¢ –õ–∏—Ç—Ä—ã –∏ —Ü–µ–Ω–∞ - —á–∏—Å–ª–∞ (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π)\n"
            "‚Ä¢ –ü—Ä–æ–±–µ–≥ - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\n\n"
            "–ü—Ä–∏–º–µ—Ä: 45.5 2500 155000",
            reply_markup=keyboard
        )
        return WAITING_REFILL_DATA

def stats(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    keyboard = get_main_keyboard()
    
    current = db.get_current_consumption(user_id)
    monthly = db.get_monthly_statistics(user_id)
    
    if not current and not monthly:
        update.message.reply_text(
            "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è!",
            reply_markup=keyboard
        )
        return
    
    message = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n\n"
    
    if current:
        message += (
            "üéØ –¢–ï–ö–£–©–ò–ô –†–ê–°–•–û–î:\n"
            f"‚Ä¢ –†–∞—Å—Ö–æ–¥: {current['consumption']} –ª/100–∫–º\n"
            f"‚Ä¢ –ü—Ä–æ–±–µ–≥: {current['distance']} –∫–º\n"
            f"‚Ä¢ –ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ: {current['fuel_used']} –ª\n\n"
        )
    
    if monthly:
        message += "üìÖ –ü–û –ú–ï–°–Ø–¶–ê–ú:\n"
        for month_data in monthly:
            message += (
                f"‚Ä¢ {month_data['month']}: {month_data['liters']} –ª, "
                f"{month_data['cost']} —Ä—É–±, "
                f"{month_data['avg_price_per_liter']} —Ä—É–±/–ª\n"
            )
    
    update.message.reply_text(message, reply_markup=keyboard)

def reset_start(update: Update, context: CallbackContext):
    keyboard = [[KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    update.message.reply_text(
        "üóëÔ∏è –°–ë–†–û–° –î–ê–ù–ù–´–•\n\n"
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã?\n"
        "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–∞–≤–æ–∫!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç",
        reply_markup=reply_markup
    )
    return CONFIRM_RESET

def reset_confirm(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    keyboard = get_main_keyboard()
    response = update.message.text.lower()
    
    if response == "–¥–∞":
        if db.delete_user_data(user_id):
            update.message.reply_text(
                "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!\n\n"
                "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å ‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è",
                reply_markup=keyboard
            )
        else:
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=keyboard
            )
    else:
        update.message.reply_text(
            "‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            reply_markup=keyboard
        )
    
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    keyboard = get_main_keyboard()
    update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=keyboard
    )
    return ConversationHandler.END

def main():
    token = os.getenv('BOT_TOKEN')
    
    if not token:
        logger.error("BOT_TOKEN not found in environment variables!")
        return
    
    updater = Updater(token, use_context=True)
    application = updater.dispatcher
    
    refill_handler = ConversationHandler(
        entry_points=[
            CommandHandler('refill', refill_start),
            MessageHandler(Filters.regex('^‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è$'), refill_start)
        ],
        states={
            WAITING_REFILL_DATA: [MessageHandler(Filters.text & ~Filters.command, refill_data)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    reset_handler = ConversationHandler(
        entry_points=[
            CommandHandler('reset', reset_start),
            MessageHandler(Filters.regex('^üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ$'), reset_start)
        ],
        states={
            CONFIRM_RESET: [MessageHandler(Filters.text & ~Filters.command, reset_confirm)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(refill_handler)
    application.add_handler(reset_handler)
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("help", help_command))
    
    application.add_handler(MessageHandler(Filters.regex('^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), stats))
    application.add_handler(MessageHandler(Filters.regex('^‚ÑπÔ∏è –ü–æ–º–æ—â—å$'), help_command))
    
    logger.info("Bot is starting...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
