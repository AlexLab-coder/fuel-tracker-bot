import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from database import FuelDatabase

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize database
db = FuelDatabase()

# Conversation states
WAITING_REFILL_DATA, CONFIRM_RESET = range(2)

# Store temporary data
user_temp_data = {}

def get_main_keyboard():
    """Create and return the main keyboard with Russian buttons"""
    keyboard = [
        [KeyboardButton("‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    user = update.effective_user
    keyboard = get_main_keyboard()
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/refill - –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–∞–≤–∫—É\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–∞\n"
        "/reset - –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        "/help - –ü–æ–º–æ—â—å",
        reply_markup=keyboard
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Display help information"""
    keyboard = get_main_keyboard()
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–û–ú–û–©–¨:\n\n"
        "‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è:\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ª–∏—Ç—Ä—ã —Ü–µ–Ω–∞ –ø—Ä–æ–±–µ–≥\n"
        "–ü—Ä–∏–º–µ—Ä: 45 2500 155000\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –∏ –ø–æ–º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n"
        "–£–¥–∞–ª—è–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–∞–≤–æ–∫\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
        reply_markup=keyboard
    )

async def refill_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start the refill recording process"""
    keyboard = get_main_keyboard()
    await update.message.reply_text(
        "‚õΩ –ó–ê–ü–†–ê–í–ö–ê\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ª–∏—Ç—Ä—ã —Ü–µ–Ω–∞ –ø—Ä–æ–±–µ–≥\n\n"
        "–ü—Ä–∏–º–µ—Ä: 45 2500 155000\n\n"
        "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        reply_markup=keyboard
    )
    return WAITING_REFILL_DATA

async def refill_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process refill data from single line input"""
    user_id = update.effective_user.id
    keyboard = get_main_keyboard()
    
    try:
        parts = update.message.text.strip().split()
        
        if len(parts) != 3:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ª–∏—Ç—Ä—ã —Ü–µ–Ω–∞ –ø—Ä–æ–±–µ–≥\n\n"
                "–ü—Ä–∏–º–µ—Ä: 45 2500 155000",
                reply_markup=keyboard
            )
            return WAITING_REFILL_DATA
        
        amount = float(parts[0])
        cost = float(parts[1])
        odometer = int(parts[2])
        
        if amount <= 0 or cost <= 0 or odometer <= 0:
            await update.message.reply_text(
                "‚ùå –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=keyboard
            )
            return WAITING_REFILL_DATA
        
        if db.add_refill(user_id, amount, cost, odometer):
            price_per_liter = cost / amount
            await update.message.reply_text(
                "‚úÖ –ó–∞–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
                f"üìä –°–≤–æ–¥–∫–∞:\n"
                f"‚Ä¢ –¢–æ–ø–ª–∏–≤–æ: {amount} –ª\n"
                f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} —Ä—É–±\n"
                f"‚Ä¢ –û–¥–æ–º–µ—Ç—Ä: {odometer} –∫–º\n"
                f"‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –ª–∏—Ç—Ä: {price_per_liter:.2f} —Ä—É–±/–ª\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–∞!",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=keyboard
            )
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "‚Ä¢ –õ–∏—Ç—Ä—ã –∏ —Ü–µ–Ω–∞ - —á–∏—Å–ª–∞ (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π)\n"
            "‚Ä¢ –ü—Ä–æ–±–µ–≥ - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\n\n"
            "–ü—Ä–∏–º–µ—Ä: 45.5 2500 155000",
            reply_markup=keyboard
        )
        return WAITING_REFILL_DATA

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Display enhanced fuel consumption statistics"""
    user_id = update.effective_user.id
    keyboard = get_main_keyboard()
    
    # Get current consumption
    current = db.get_current_consumption(user_id)
    
    # Get monthly statistics
    monthly = db.get_monthly_statistics(user_id)
    
    if not current and not monthly:
        await update.message.reply_text(
            "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è!",
            reply_markup=keyboard
        )
        return
    
    message = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n\n"
    
    # Current consumption
    if current:
        message += (
            "üéØ –¢–ï–ö–£–©–ò–ô –†–ê–°–•–û–î:\n"
            f"‚Ä¢ –†–∞—Å—Ö–æ–¥: {current['consumption']} –ª/100–∫–º\n"
            f"‚Ä¢ –ü—Ä–æ–±–µ–≥: {current['distance']} –∫–º\n"
            f"‚Ä¢ –ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ: {current['fuel_used']} –ª\n\n"
        )
    
    # Monthly statistics
    if monthly:
        message += "üìÖ –ü–û –ú–ï–°–Ø–¶–ê–ú:\n"
        for month_data in monthly:
            # Convert English month names to Russian
            month_ru = month_data['month']
            month_ru = month_ru.replace('January', '–Ø–Ω–≤–∞—Ä—å')
            month_ru = month_ru.replace('February', '–§–µ–≤—Ä–∞–ª—å')
            month_ru = month_ru.replace('March', '–ú–∞—Ä—Ç')
            month_ru = month_ru.replace('April', '–ê–ø—Ä–µ–ª—å')
            month_ru = month_ru.replace('May', '–ú–∞–π')
            month_ru = month_ru.replace('June', '–ò—é–Ω—å')
            month_ru = month_ru.replace('July', '–ò—é–ª—å')
            month_ru = month_ru.replace('August', '–ê–≤–≥—É—Å—Ç')
            month_ru = month_ru.replace('September', '–°–µ–Ω—Ç—è–±—Ä—å')
            month_ru = month_ru.replace('October', '–û–∫—Ç—è–±—Ä—å')
            month_ru = month_ru.replace('November', '–ù–æ—è–±—Ä—å')
            month_ru = month_ru.replace('December', '–î–µ–∫–∞–±—Ä—å')
            
            message += (
                f"‚Ä¢ {month_ru}: {month_data['liters']} –ª, "
                f"{month_data['cost']} —Ä—É–±, "
                f"{month_data['avg_price_per_liter']} —Ä—É–±/–ª\n"
            )
    
    await update.message.reply_text(message, reply_markup=keyboard)

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Display refill history"""
    user_id = update.effective_user.id
    keyboard = get_main_keyboard()
    refills = db.get_user_refills(user_id)
    
    if not refills:
        await update.message.reply_text(
            "üìù –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–∞–≤–æ–∫.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏!",
            reply_markup=keyboard
        )
        return
    
    message = "üìù –ò–°–¢–û–†–ò–Ø –ó–ê–ü–†–ê–í–û–ö:\n\n"
    
    for i, refill in enumerate(refills, 1):
        date = refill['timestamp'].split('T')[0]
        price_per_liter = refill['cost'] / refill['amount']
        message += (
            f"{i}. {date}\n"
            f"   ‚õΩ {refill['amount']} –ª | üí∞ {refill['cost']} —Ä—É–± | "
            f"üõ£ {refill['odometer']} –∫–º\n"
            f"   –¶–µ–Ω–∞: {price_per_liter:.2f} —Ä—É–±/–ª\n\n"
        )
    
    await update.message.reply_text(message, reply_markup=keyboard)

async def reset_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start the data reset process"""
    keyboard = [[KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üóëÔ∏è –°–ë–†–û–° –î–ê–ù–ù–´–•\n\n"
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã?\n"
        "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–∞–≤–æ–∫!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç",
        reply_markup=reply_markup
    )
    return CONFIRM_RESET

async def reset_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Confirm and execute data reset"""
    user_id = update.effective_user.id
    keyboard = get_main_keyboard()
    response = update.message.text.lower()
    
    if response == "–¥–∞":
        if db.delete_user_data(user_id):
            await update.message.reply_text(
                "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!\n\n"
                "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å ‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=keyboard
            )
    else:
        await update.message.reply_text(
            "‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            reply_markup=keyboard
        )
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel the current operation"""
    keyboard = get_main_keyboard()
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=keyboard
    )
    return ConversationHandler.END

def main():
    """Start the bot"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN not found in environment variables!")
        return
    
    application = Application.builder().token(token).build()
    
    # Conversation handler for refill
    refill_handler = ConversationHandler(
        entry_points=[
            CommandHandler('refill', refill_start),
            MessageHandler(filters.Regex('^‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è$'), refill_start)
        ],
        states={
            WAITING_REFILL_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, refill_data)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # Conversation handler for reset
    reset_handler = ConversationHandler(
        entry_points=[
            CommandHandler('reset', reset_start),
            MessageHandler(filters.Regex('^üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ$'), reset_start)
        ],
        states={
            CONFIRM_RESET: [MessageHandler(filters.TEXT & ~filters.COMMAND, reset_confirm)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(refill_handler)
    application.add_handler(reset_handler)
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("help", help_command))
    
    # Add button handlers
    application.add_handler(MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), stats))
    application.add_handler(MessageHandler(filters.Regex('^‚ÑπÔ∏è –ü–æ–º–æ—â—å$'), help_command))
    
    # Start the Bot
    logger.info("Bot is starting...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
